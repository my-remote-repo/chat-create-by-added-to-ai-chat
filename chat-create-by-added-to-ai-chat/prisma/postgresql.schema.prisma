// Схема PostgreSQL через Prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  output          = "../node_modules/.prisma/postgresql-client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
  schemas  = ["public", "chat", "user"]
}

// Користувач
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        UserStatus @default(OFFLINE)
  lastSeen      DateTime  @default(now())

  accounts        Account[]
  sessions        Session[]
  ownedChats      Chat[]            @relation("ChatOwner")
  participations  ChatParticipant[]
  userSettings    UserSettings?
  tokens          UserToken[]

  @@schema("user")
}

// Налаштування користувача
model UserSettings {
  id                    String  @id @default(uuid())
  userId                String  @unique
  theme                 String  @default("system")
  language              String  @default("uk")
  notificationsEnabled  Boolean @default(true)
  soundsEnabled         Boolean @default(true)
  desktopNotifications  Boolean @default(true)
  emailNotifications    Boolean @default(true)
  showReadReceipts      Boolean @default(true)
  showOnlineStatus      Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("user")
}

// Статус користувача
enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY

  @@schema("user")
}

// Токени користувача (для скидання паролю, тощо)
model UserToken {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  type        String   // "reset_password", "email_verification", etc.
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("user")
}

// Акаунт (для соціальної авторизації)
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("user")
}

// Сесія
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("user")
}

// Чат (особистий або груповий)
model Chat {
  id          String    @id @default(uuid())
  name        String?
  description String?
  isGroup     Boolean   @default(false)
  image       String?
  ownerId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  owner        User?            @relation("ChatOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  participants ChatParticipant[]
  files        File[]

  @@schema("chat")
}

// Участь користувача в чаті
model ChatParticipant {
  id                  String   @id @default(uuid())
  chatId              String
  userId              String
  isAdmin             Boolean  @default(false)
  joinedAt            DateTime @default(now())
  lastReadAt          DateTime @default(now())
  notificationsEnabled Boolean @default(true)
  isArchived          Boolean  @default(false)
  isBlocked           Boolean  @default(false)
  nickname            String?

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@schema("chat")
}

// Файли (прикріплені до повідомлень або чатів)
model File {
  id        String    @id @default(uuid())
  name      String
  url       String
  key       String?   // Ключ для S3 або іншого сховища
  size      Int
  type      String
  chatId    String?
  userId    String
  createdAt DateTime  @default(now())

  chat      Chat?     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@schema("chat")
}

// Для збереження верифікаційних токенів
model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("user")
}